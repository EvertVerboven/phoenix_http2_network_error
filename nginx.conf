user  nginx;
worker_processes  1;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;


events {
    worker_connections  1024;
}

http {
  # access_log off;
  
  # allow largish client request bodies
  client_max_body_size 10M;

  # Upstream backend servers
  upstream foo_http {
    server foo:4000;
  }

  # HTTP (redirects to HTTPS)
  server {
    listen 4000;
    listen [::]:4000;

    server_name _;
    return 308 https://$host:4001$request_uri;
  }

  # HTTPS
  server {
    listen 4001 http2 ssl;
    listen [::]:4001 http2 ssl;

    location / {
      proxy_pass http://foo_http;
    }

    # Pass client request info to upstream servers
    proxy_set_header    Host $host;
    proxy_set_header    X-Real-IP $remote_addr;
    proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header    X-Forwarded-Proto $scheme;

     # The Important Websocket Bits!
    proxy_set_header    Upgrade $http_upgrade;
    proxy_set_header    Connection "upgrade";

    # Terminate HTTPS
    ssl_certificate             ssl/selfsigned.pem;
    ssl_certificate_key         ssl/selfsigned_key.pem;
    ssl_protocols               TLSv1.2 TLSv1.3;# Requires nginx >= 1.13.0 else use TLSv1.2
    ssl_prefer_server_ciphers   on;
    ssl_ciphers                 ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384;
    ssl_ecdh_curve              secp384r1; # Requires nginx >= 1.1.0
    ssl_session_timeout         10m;
    ssl_session_cache           shared:SSL:10m;
    ssl_session_tickets         off; # Requires nginx >= 1.5.9
  }
}